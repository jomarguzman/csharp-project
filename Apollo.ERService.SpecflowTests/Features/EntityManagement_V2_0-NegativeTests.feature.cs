// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Apollo.ERService.SpecflowTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EntityManagementV2_0_NegativeTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "EntityManagement_V2_0-NegativeTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Entity Management V2.0 - NegativeTests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Entity Management V2.0 - NegativeTests")))
            {
                global::Apollo.ERService.SpecflowTests.Features.EntityManagementV2_0_NegativeTestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
#line 12
 testRunner.Given("an IMS User \"apollo.er.testuser1\" with an access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.When("the IMS User posts Collection and response status Code as OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities Synchronously Without Required Fields in Entity Id " +
            "and validate response message Entity id is missing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_PostEntitiesSynchronouslyWithoutRequiredFieldsInEntityIdAndValidateResponseMessageEntityIdIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities Synchronously Without Required Fields in Entity Id " +
                    "and validate response message Entity id is missing", null, ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 16
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" without the \"entityId\"" +
                    " property using V2.0 in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("validate the IMS User gets \"failure\" responses message \"Entity id is missing\" whi" +
                    "le updating entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
  testRunner.And("validate IMS User gets \"0\" entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities Synchronously Without Required Fields in Entity Typ" +
            "e and validate response message Entity Type is missing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_PostEntitiesSynchronouslyWithoutRequiredFieldsInEntityTypeAndValidateResponseMessageEntityTypeIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities Synchronously Without Required Fields in Entity Typ" +
                    "e and validate response message Entity Type is missing", null, ((string[])(null)));
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 21
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" without the \"entityTyp" +
                    "e\" property using V2.0 in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("validate the IMS User gets \"failure\" responses message \"Entity type is missing\" w" +
                    "hile updating entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
  testRunner.And("validate IMS User gets \"0\" entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities Synchronously Without Required Fields in Entity Nam" +
            "e and validate response message Entity Name PropertyRequired")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_PostEntitiesSynchronouslyWithoutRequiredFieldsInEntityNameAndValidateResponseMessageEntityNamePropertyRequired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities Synchronously Without Required Fields in Entity Nam" +
                    "e and validate response message Entity Name PropertyRequired", null, ((string[])(null)));
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 26
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" without the \"entityNam" +
                    "e\" property using V2.0 in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("validate the IMS User gets \"failure\" responses message \"entityName:PropertyRequir" +
                    "ed\" while updating entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
  testRunner.And("validate IMS User gets \"0\" entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities Synchronously Without ER Collection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_PostEntitiesSynchronouslyWithoutERCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities Synchronously Without ER Collection", null, ((string[])(null)));
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 31
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 without an " +
                    "ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("validate the IMS User gets \"400\" Bad Request error code for the post(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
  testRunner.And("validate IMS User cannot get the entity without ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
  testRunner.And("validate IMS User cannot delete the entity without the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities Synchronously with an empty list in an ER Collectio" +
            "n")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_PostEntitiesSynchronouslyWithAnEmptyListInAnERCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities Synchronously with an empty list in an ER Collectio" +
                    "n", null, ((string[])(null)));
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 37
 testRunner.When("the IMS User posts empty list \"0\" new entities where \"async\" is \"false\" using V2." +
                    "0 in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("validate the IMS User gets \"400\" Bad Request error code for the post(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
  testRunner.And("validate IMS User gets \"403\" Forbidden error code for get all entities request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
  testRunner.And("validate IMS User gets \"403\" Forbidden error code for delete entities request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities Synchronously With Invalid Token")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_PostEntitiesSynchronouslyWithInvalidToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities Synchronously With Invalid Token", null, ((string[])(null)));
#line 42
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 43
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" With Invalid Token usi" +
                    "ng V2.0 in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("validate the IMS User gets \"401\" Unauthorized error code for the post(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
  testRunner.And("validate IMS User gets \"0\" entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities in Bulk Synchronously in an ER Collection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BulkPost")]
        public virtual void NegativeTest_PostEntitiesInBulkSynchronouslyInAnERCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities in Bulk Synchronously in an ER Collection", null, new string[] {
                        "BulkPost"});
#line 48
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 49
 testRunner.When("the IMS User posts \"101\" new entities in bulk where \"async\" is \"false\" using V2.0" +
                    " in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("validate the IMS User gets \"413\" Request Entity Too Large error code for the post" +
                    "(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
  testRunner.And("validate IMS User gets \"403\" Forbidden error code for get all entities request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
  testRunner.And("validate IMS User gets \"403\" Forbidden error code for delete entities request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities Asynchronously Without Required Fields in an ER Col" +
            "lection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_PostEntitiesAsynchronouslyWithoutRequiredFieldsInAnERCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities Asynchronously Without Required Fields in an ER Col" +
                    "lection", null, ((string[])(null)));
#line 54
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 55
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"true\" without the \"entityId\" " +
                    "property using V2.0 in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
     testRunner.And("the IMS User posts \"1\" new entity where \"async\" is \"true\" without the \"entityType" +
                    "\" property using V2.0 in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
     testRunner.And("the IMS User posts \"1\" new entity where \"async\" is \"true\" without the \"entityName" +
                    "\" property using V2.0 in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.Then("validate the IMS User gets \"400\" Bad Request error code for the post(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
  testRunner.And("validate IMS User gets \"0\" entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities Asynchronously with an empty list in an ER Collecti" +
            "on")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_PostEntitiesAsynchronouslyWithAnEmptyListInAnERCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities Asynchronously with an empty list in an ER Collecti" +
                    "on", null, ((string[])(null)));
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 62
 testRunner.When("the IMS User posts empty list \"0\" new entities where \"async\" is \"true\" using V2.0" +
                    " in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("validate the IMS User gets \"400\" Bad Request error code for the post(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
  testRunner.And("validate IMS User gets \"403\" Forbidden error code for get all entities request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
  testRunner.And("validate IMS User gets \"403\" Forbidden error code for delete entities request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Post Entities in Bulk Asynchronously in an ER Collection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BulkPost")]
        public virtual void NegativeTest_PostEntitiesInBulkAsynchronouslyInAnERCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Post Entities in Bulk Asynchronously in an ER Collection", null, new string[] {
                        "BulkPost"});
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 69
 testRunner.When("the IMS User posts \"10001\" new entities in bulk where \"async\" is \"true\" using V2." +
                    "0 in an ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("validate the IMS User gets \"413\" Request Entity Too Large error code for the post" +
                    "(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
  testRunner.And("validate IMS User gets \"403\" Forbidden error code for get all entities request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
  testRunner.Then("validate the IMS User gets \"404\" Not Found error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Get Entities Without ER Collection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_GetEntitiesWithoutERCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Get Entities Without ER Collection", null, ((string[])(null)));
#line 75
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 76
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"true\" using V2.0 without an E" +
                    "R Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("validate the IMS User gets \"400\" Bad Request error code for the post(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
     testRunner.And("validate IMS User cannot get the entity without ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
     testRunner.And("validate IMS User cannot delete the entity without the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Negative Test - Get Entity By EntityId that doesn\'t exist from an ER Collection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void NegativeTest_GetEntityByEntityIdThatDoesntExistFromAnERCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative Test - Get Entity By EntityId that doesn\'t exist from an ER Collection", null, ((string[])(null)));
#line 81
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 82
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.And("the IMS User posts Collection and response status Code as OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.And("the IMS User gets a specific entity by entity Id that doesn\'t exist from the ER C" +
                    "ollection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.Then("validate the IMS User gets \"404\" Not Found error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Synchronously in an ER Collection using V2.0 with allowPartialUpdat" +
            "e, with Invalid Schema")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PartialUpdate")]
        public virtual void PostEntitiesSynchronouslyInAnERCollectionUsingV2_0WithAllowPartialUpdateWithInvalidSchema()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Synchronously in an ER Collection using V2.0 with allowPartialUpdat" +
                    "e, with Invalid Schema", null, new string[] {
                        "PartialUpdate"});
#line 100
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 101
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" and \"allowPartialUpdat" +
                    "e\" is \"true\" using V2.0 in the ER Collection \"1\" time(s) with Invalid Schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("validate the IMS User gets \"failure\" responses message \"Failed-InvalidSchema\" whi" +
                    "le updating entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
  testRunner.And("validate IMS User gets \"0\" entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Partially Update the Entities Synchronously With Invalid property Fileds and vali" +
            "date response message NoAdditionalPropertiesAllowed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PartialUpdate")]
        public virtual void PartiallyUpdateTheEntitiesSynchronouslyWithInvalidPropertyFiledsAndValidateResponseMessageNoAdditionalPropertiesAllowed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partially Update the Entities Synchronously With Invalid property Fileds and vali" +
                    "date response message NoAdditionalPropertiesAllowed", null, new string[] {
                        "PartialUpdate"});
#line 106
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 107
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
  testRunner.And("the IMS User updates the entities where \"async\" is \"false\" and \"allowPartialUpdat" +
                    "e\" is \"true\" with invalid property name \"InvalidProp\" and value \"Test-01\" in the" +
                    " ER Collection using V2.0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.Then("validate the IMS User gets \"failure\" responses message \"NoAdditionalPropertiesAll" +
                    "owed\" while updating entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Partially Update the Entities Synchronously Without the Required field Entity Id " +
            "and validate response message Entity id is missing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PartialUpdate")]
        public virtual void PartiallyUpdateTheEntitiesSynchronouslyWithoutTheRequiredFieldEntityIdAndValidateResponseMessageEntityIdIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partially Update the Entities Synchronously Without the Required field Entity Id " +
                    "and validate response message Entity id is missing", null, new string[] {
                        "PartialUpdate"});
#line 114
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 115
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
  testRunner.And("the IMS User updates the entities where \"async\" is \"false\" and \"allowPartialUpdat" +
                    "e\" is \"true\" without the \"entityId\" property using V2.0 in the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.Then("validate the IMS User gets \"failure\" responses message \"Entity id is missing\" whi" +
                    "le updating entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entity Synchronously in an ER Collection using V2.0 and Updating Entity Type" +
            " for this Entity is Not Allowed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0 - NegativeTests")]
        public virtual void PostEntitySynchronouslyInAnERCollectionUsingV2_0AndUpdatingEntityTypeForThisEntityIsNotAllowed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entity Synchronously in an ER Collection using V2.0 and Updating Entity Type" +
                    " for this Entity is Not Allowed", null, ((string[])(null)));
#line 121
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 122
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
  testRunner.And("the IMS User updates entity type for the entity where \"async\" is \"false\" using V2" +
                    ".0 in the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.Then("validate the IMS User gets \"failure\" responses message \"Restricted property entit" +
                    "yType is not allowed to change\" while updating entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

