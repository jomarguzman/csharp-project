// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Apollo.ERService.SpecflowTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EntityManagementV2_0Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "EntityManagement_V2_0.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Entity Management V2.0", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Entity Management V2.0")))
            {
                global::Apollo.ERService.SpecflowTests.Features.EntityManagementV2_0Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
#line 12
 testRunner.Given("an IMS User \"apollo.er.testuser1\" with an access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.When("the IMS User posts Collection and response status Code as OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Synchronously in an ER Collection, Get All Entities from the ER Col" +
            "lection, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        public virtual void PostEntitiesSynchronouslyInAnERCollectionGetAllEntitiesFromTheERCollectionAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Synchronously in an ER Collection, Get All Entities from the ER Col" +
                    "lection, and Delete Entities", null, ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 16
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("validate the IMS User gets all entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Synchronously in an ER Collection, Get A Specific Entity By Entity " +
            "Id from the ER Collection, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        public virtual void PostEntitiesSynchronouslyInAnERCollectionGetASpecificEntityByEntityIdFromTheERCollectionAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Synchronously in an ER Collection, Get A Specific Entity By Entity " +
                    "Id from the ER Collection, and Delete Entities", null, ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 22
    testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
    testRunner.Then("validate the IMS User gets a specific entity by entity Id from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
     testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
     testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Synchronously in an ER Collection, Get All Versions Of A Specific E" +
            "ntity By Entity Id from the ER Collection, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        public virtual void PostEntitiesSynchronouslyInAnERCollectionGetAllVersionsOfASpecificEntityByEntityIdFromTheERCollectionAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Synchronously in an ER Collection, Get All Versions Of A Specific E" +
                    "ntity By Entity Id from the ER Collection, and Delete Entities", null, ((string[])(null)));
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 28
    testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"2\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("validate the IMS User gets all \"2\" versions of a specific entity by entity Id fro" +
                    "m the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
     testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
     testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Synchronously in an ER Collection, Get All Versions Of A Specific E" +
            "ntity By Entity Id using Page Size and Continuation Token from the ER Collection" +
            ", and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        public virtual void PostEntitiesSynchronouslyInAnERCollectionGetAllVersionsOfASpecificEntityByEntityIdUsingPageSizeAndContinuationTokenFromTheERCollectionAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Synchronously in an ER Collection, Get All Versions Of A Specific E" +
                    "ntity By Entity Id using Page Size and Continuation Token from the ER Collection" +
                    ", and Delete Entities", null, ((string[])(null)));
#line 33
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 34
    testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"2\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("validate the IMS User gets \"1\" versions of a specific entity by entity Id and \"co" +
                    "ntinuationToken\" when page size is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
  testRunner.And("validate the IMS User gets \"1\" versions of a specific entity by entity Id using t" +
                    "he \"continuationToken\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
     testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
     testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Asynchronously in an ER Collection, Get All Versions Of A Specific " +
            "Entity By Entity Id from the ER Collection, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        public virtual void PostEntitiesAsynchronouslyInAnERCollectionGetAllVersionsOfASpecificEntityByEntityIdFromTheERCollectionAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Asynchronously in an ER Collection, Get All Versions Of A Specific " +
                    "Entity By Entity Id from the ER Collection, and Delete Entities", null, ((string[])(null)));
#line 40
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 41
    testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"true\" using V2.0 in an ER Col" +
                    "lection \"2\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("validate the IMS User gets all \"2\" versions of a specific entity by entity Id fro" +
                    "m the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
     testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
     testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Synchronously in an ER Collection, Get Multiple Entities by Ids fro" +
            "m the ER Collection, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        public virtual void PostEntitiesSynchronouslyInAnERCollectionGetMultipleEntitiesByIdsFromTheERCollectionAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Synchronously in an ER Collection, Get Multiple Entities by Ids fro" +
                    "m the ER Collection, and Delete Entities", null, ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 47
    testRunner.When("the IMS User posts \"3\" new entities where \"async\" is \"false\" using V2.0 in an ER " +
                    "Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("validate the IMS User gets all entities by Ids from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
     testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
     testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Asynchronously in an ER Collection, Get All Entities from the ER Co" +
            "llection, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        public virtual void PostEntitiesAsynchronouslyInAnERCollectionGetAllEntitiesFromTheERCollectionAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Asynchronously in an ER Collection, Get All Entities from the ER Co" +
                    "llection, and Delete Entities", null, ((string[])(null)));
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 53
    testRunner.When("the IMS User posts \"5\" new entities where \"async\" is \"true\" using V2.0 in an ER C" +
                    "ollection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("validate the IMS User gets all entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities in Bulk Asynchronously in an ER Collection, Get All Entities from t" +
            "he ER Collection, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BulkPost")]
        public virtual void PostEntitiesInBulkAsynchronouslyInAnERCollectionGetAllEntitiesFromTheERCollectionAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities in Bulk Asynchronously in an ER Collection, Get All Entities from t" +
                    "he ER Collection, and Delete Entities", null, new string[] {
                        "BulkPost"});
#line 59
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 60
 testRunner.When("the IMS User posts \"50\" new entities where \"async\" is \"true\" using V2.0 in an ER " +
                    "Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.Then("validate the IMS User gets all entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Synchronously in an ER Collection using V2.0, Partially Update the " +
            "Entities Synchronously, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PartialUpdate")]
        public virtual void PostEntitiesSynchronouslyInAnERCollectionUsingV2_0PartiallyUpdateTheEntitiesSynchronouslyAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Synchronously in an ER Collection using V2.0, Partially Update the " +
                    "Entities Synchronously, and Delete Entities", null, new string[] {
                        "PartialUpdate"});
#line 74
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 75
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.And("the IMS User updates the entities where \"async\" is \"false\" and \"allowPartialUpdat" +
                    "e\" is \"true\" using V2.0 in the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.Then("validate the IMS User updates the posted entities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Asynchronously in an ER Collection using V2.0, Partially Update the" +
            " Entities Asynchronously, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PartialUpdate")]
        public virtual void PostEntitiesAsynchronouslyInAnERCollectionUsingV2_0PartiallyUpdateTheEntitiesAsynchronouslyAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Asynchronously in an ER Collection using V2.0, Partially Update the" +
                    " Entities Asynchronously, and Delete Entities", null, new string[] {
                        "PartialUpdate"});
#line 82
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 83
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"true\" using V2.0 in an ER Col" +
                    "lection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
  testRunner.And("the IMS User updates the entities where \"async\" is \"true\" and \"allowPartialUpdate" +
                    "\" is \"true\" using V2.0 in the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.Then("validate the IMS User updates the posted entities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Synchronously in an ER Collection using V2.0 with allowPartialUpdat" +
            "e,Get All Entities from the ER Collection, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PartialUpdate")]
        public virtual void PostEntitiesSynchronouslyInAnERCollectionUsingV2_0WithAllowPartialUpdateGetAllEntitiesFromTheERCollectionAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Synchronously in an ER Collection using V2.0 with allowPartialUpdat" +
                    "e,Get All Entities from the ER Collection, and Delete Entities", null, new string[] {
                        "PartialUpdate"});
#line 90
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 91
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" and \"allowPartialUpdat" +
                    "e\" is \"true\" using V2.0 in the ER Collection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("validate the IMS User gets all entities from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 93
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Post Entities Synchronously in an ER Collection using V2.0, Partially Update the " +
            "Entity ID Synchronously, and Delete Entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PartialUpdate")]
        public virtual void PostEntitiesSynchronouslyInAnERCollectionUsingV2_0PartiallyUpdateTheEntityIDSynchronouslyAndDeleteEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Entities Synchronously in an ER Collection using V2.0, Partially Update the " +
                    "Entity ID Synchronously, and Delete Entities", null, new string[] {
                        "PartialUpdate"});
#line 97
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 98
 testRunner.When("the IMS User posts \"1\" new entity where \"async\" is \"false\" using V2.0 in an ER Co" +
                    "llection \"1\" time(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
  testRunner.And("the IMS User updates the entity ID where \"async\" is \"false\" and \"allowPartialUpda" +
                    "te\" is \"true\" using V2.0 in the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.Then("validate the IMS User updates the posted entities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
  testRunner.And("IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
  testRunner.And("validate IMS User deletes the entity from the ER Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Upload Json File in an ER Collection, Get file by file name and Get File by Id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entity Management V2.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetFile")]
        public virtual void UploadJsonFileInAnERCollectionGetFileByFileNameAndGetFileById()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload Json File in an ER Collection, Get file by file name and Get File by Id", null, new string[] {
                        "GetFile"});
#line 105
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line 106
 testRunner.When("the IMS User \"apollo.er.testuser1\" uploads \"PostEntities.json\", \"PostRelationship" +
                    ".json\" files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.Then("validate the IMS user gets files by filename \"PostEntities.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
  testRunner.And("validate the IMS user gets file by Id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

